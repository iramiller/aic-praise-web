#!/usr/bin/env node
/**
 * Module dependencies.
 */
const {spawn} = require('child_process');
const Primus = require('primus');
const fs = require('fs');
const http = require('http');
const os = require('os');
const path = require('path');
const app = require('../app');

// Logging setup
const winston = require('winston');
const logger = new (winston.Logger)({
  transports: [
    // colorize the output to the console
    new (winston.transports.Console)({
      timestamp: () => (new Date()).toLocaleTimeString(),
      colorize: true,
      level: 'info',
    }),
  ],
});

const REMOTE_HOST = 'aic-sri-international.github.io';
const REMOTE_PATH = '/aic-praise/praise.jar';
// Capture a starting path to a JAR file in our container (or local instance).  Works even when REMOTE is unavailable.
const BASE_JAR_PATH = (process.env.JAR_PATH || 'PRAiSE-1.3.4-SNAPSHOT-jar-with-dependencies.jar');

// Start with the fall back path to the JAR (as it should be packaged into the container)
let JAR_PATH = BASE_JAR_PATH;

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);
let primus = new Primus(server, {transformer: 'websockets'});
primus.plugin('emit', require('primus-emit'));

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);

server.on('error', logger.error);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 *
 * @param {any} val the value to use for the port.
 * @return {any} false if invalid / unusable val given otherwise PORT as Int
 */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.debug('Listening on ' + bind);
}

/**
 * Runs a command for a given client
 *
 * @param {String} modelFile -- path and name of the temporary file to use as input
 * @param {String} query -- the query to execute against the model
 * @param {Primus.spark} client - connection/socket to client
 */
function runCommand(modelFile, query, client) {
  let args = ['-jar', JAR_PATH, modelFile];
  // Optional config that pauses until debugger attaches.
  // let args = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=y', '-jar', JAR_PATH, modelFile];
  if (query && query !== '') {
    //    args.push('--summations');
    //    args.push('--count');
    args.push('--query');
    args.push(query);
  } else {
    args.push('--model');
  }
  logger.debug('Command args', args);
  let cmd = spawn('java', args);

  cmd.stdout.on('data', (d) => {
    client.write(`${d}`);
  });
  cmd.stderr.on('data', (d) => {
    client.write(`${d}`);
  });
  cmd.on('error', (e) => {
    logger.error('Error Executing Command', {command: 'java', args: args, error: e});
    client.write('An error occured.'); // avoid leaking error information to the client
    if (JAR_PATH !== BASE_JAR_PATH) {
      logger.warn('Since an error occured executing command and updated JAR path is applied, fall back to source JAR');
      JAR_PATH = BASE_JAR_PATH;
    }
  });
  cmd.on('close', (code) => {
    process.nextTick(() => fs.unlinkSync(modelFile));
    if (code !== 0) {
      logger.error('Process exited with fault code', code);
    }
    client.write(`// Complete.`);
  });
}

/**
 * Returns the last modified date for the file at the given path
 *
 * @param {string} path the path to the file to get the last modified time for.
 * @return {promise} a promise that contains the last modified string in a suitable format for HTTP Header.
 */
function lastModifiedTime(path) {
  return new Promise((resolve, reject) => {
    fs.stat(JAR_PATH, (e, s) => {
      if (e) {
        reject(e);
      } else {
        resolve(s.mtime.toUTCString());
      }
    });
  });
}

/**
 * Checks to see if the remote resource has been modified sinse the last modified time of the local resource.
 *
 * @param {string} remoteHost the remote host to connect to
 * @param {string} remotePath the path to the remote resource to check/download
 * @param {string} lastModifiedTime the last modified time the resource should be newer than before downloading.
 * @return {Promise} a promise that resolves if not modified or newer version can be retrieved sucessfully.
 */
function downloadRemoteIfNewer(remoteHost, remotePath, lastModifiedTime) {
  logger.info(`Checking ${remoteHost}${remotePath} to see if it is newer than ${lastModifiedTime}`);
  return new Promise((resolve, reject) => {
    let unmodified = false;
    const options = {method: 'GET', timeout: 5000, host: remoteHost, path: remotePath, headers: {'If-Modified-Since': lastModifiedTime}};
    const dest = path.join(os.tmpdir(), (Date.now() + '.jar'));
    const file = fs.createWriteStream(dest, {flags: 'wx'});
    const request = http.request(options, (response) => {
      if (response.statusCode === 200) {
        logger.info('Remote is newer, downloading file.');
        response.pipe(file);
      } else {
        file.close();
        fs.unlink(dest, () => { }); // Delete temp file
        if (response.statusCode === 304) {
          unmodified = true;
          logger.info('Remote was not modified.');
          resolve(); // nothing to do here because the remote file is not newer than the local one.
        } else {
          reject(`Server responded with ${response.statusCode}: ${response.statusMessage}`);
        }
      }
    });
    // Cancel and remove temp file.
    request.on('error', (err) => {
      file.close();
      fs.unlink(dest, () => { });
      reject(err.message);
    });
    // Finish and return the path to the new file.  If not modified then unlink, nothing more to do.
    file.on('finish', () => {
      unmodified ? fs.unlink(dest) : resolve(dest);
    });
    // On error delete temp file and fail.
    file.on('error', (err) => {
      file.close();
      fs.unlink(dest, () => { });
      reject(err.message);
    });
    request.end();
  });
}
/**
 * Makes an update to the jar if required.
*/
function conditionalUpdate() {
  lastModifiedTime(JAR_PATH)
    .then(function(mtime) {
      return downloadRemoteIfNewer(REMOTE_HOST, REMOTE_PATH, mtime);
    }).then(function(dest) {
      if (dest) {
        logger.info('Downloaded and updated jar to use: ', dest);
        JAR_PATH = dest;
      }
    }).catch((error) => {
      logger.error('Could not update local JAR with remote:', error);
    });
}

primus.on('connection', function connection(spark) {
  conditionalUpdate();
  spark.on('data', function(data) {
    spark.write(`Starting...`);
    logger.debug('Request for PRAiSE:', data);
    if (data && data.command && data.model) {
      let modelfile = path.join(os.tmpdir(), spark.id);
      if (fs.existsSync(modelfile)) {
        // Command is currently in progress.
        spark.write('// WARNING :: Request Cancelled.  Please wait for current request to complete.');
      } else {
        fs.writeFileSync(modelfile, data.model);

        if (data.command === 'runsim') {
          runCommand(modelfile, data.query, spark);
        } else if (data.command === 'validate') {
          runCommand(modelfile, null, spark);
        }
      }
    }
  });
});
